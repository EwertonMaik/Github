untracked / stage / commited
--COMANDO PARA TRABALHAR COM VERSIONAMENTO DE ARQUIVOS NO GITHUB - USANDO O GIT BASH

GRAFO DE COMMIT

--CRIAR O .GITIGNORE A PARTIR DA ESPECIFICAÇÃO TÉCNICA PARA PROJETOS DO VISUAL STUDIO 2019
https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

--EXIBE TODAS INFORMAÇÕES DE AJUDA DE COMANDOS
git

--CRIAR UM REPOSITÓRIO LOCAL DO GIT / PARA CONTROLAR A VERSÃO
--DEVE SER FEITO DENTRO DO DIRETÓRIO QUE DESEJA CONTROLAR
--PODE-SE ACESSAR A PASTA, CLICAR COM BOTÃO DIREITO E (GIT BASH HERE), APÓS DIGITAR O COMANDO:
git init

--COMANDO PARA LISTAR VERSÃO DO GITHUB
git version

--COMANDO PARA CONFIGURAR USUÁRIO E E-MAIL DE CONEXÃO
git config --global user.name "Ewerton Maik"
git config --global user.email "ewertonmsa@hotmail.com"

--COMANDO PARA CONFIGURAR O EDITOR VS CODE COMO PADRÃO
git config --global core.editor "C:\Users\Ewerton Maik\AppData\Local\Programs\Microsoft VS Code\Code.exe"

--COMANDO PARA LIMPAR TELA
clear

--COMANDO PARA LISTAR USUÁRIO E E-MAIL CONFIGURADO
git config user.name
git config user.email
git config core.editor

--COMANDO PARA VERIFICAR O STATUS DO PROJETO, SE EXISTE MODIFICAÇÕES PARA SER ADICIONADAS AO COMMIT
git status

-- COMANDO PARA ADICIONAR TODAS AS MODIFICAÇÕES AO CONTEINER DO GIT / ÁREA DE STAGE DO GIT
git add .
OU
git nome_arquivo.txt

git status

--COMANDO PARA CONFIRMAR/COMITAR AS INFORMAÇÕES ALTERADAS QUE ESTÃO NO CONTEINER
git commit -m "novas modiificações ADICIONADAS"

--VERIFICAR SE TEVE COMMIT OU EXISTE COMMITS
git log
OU
git log --oneline

--Enviar do repositório local para o Remoto(Github)
git push -u origin master
(se usar -u, nas promixas é : ==>>)
git push 

--POR ALGUM MOLTIVO, QUERO DESFAZER ALGUMAS ALTERAÇÕES FEITAS E QUE NÃO FOI COMITADA AINDA, VOLTAR AO ÚLTIMO COMMIT
git clean -df
git checkout -- .

--REMOVER O ÚLTIMO COMMIT, PORÉM MANTER AS ALTERAÇÕES DO ARQUIVOS
git reset --soft HEAD~1

--REMOVER O ÚLTIMO COMMIT E SUAS ALTERAÇÕES TAMBÉM
git reset --hard HEAD~1

--(Não Exclui Nada!) - Alternar e deixar o Projeto ou arquivos no estado de um Commit Realizado:
git checkout <código_do_commit>

--(Não Exclui Nada!) - Voltar para o atual commit que estava:
git checkout <nome_do_brach>


--Associar repositório local ao repositório remoto, com outro apelido:
git remote add origin <URI_Repositorio_Remoto>

--Associar o repositório local ao repositório remoto, mantendo o mesmo apelido:
git remote set-url origin <URI_Repositorio_Remoto>

--COMANDO PARA ATULIZAR REPOSITÓRIO LOCAL EM RELAÇÃO AO REPOSITÓRIO REMOTO
git pull origin master

--Copiar o Repositório Remoto para seu Computador, inclusive histórico de commits:
git clone <URI_Repositorio_Remoto>

-- COMANDO PARA CLONAR DIRETÓRIO DO GIHHUB PARA O DIRETÓRIO LOCAL
git clone https://github.com/EwertonMaik/pjc_adm_dados.git

-- COMANDO PARA LISTAR ARQUIVOS AND DIRETÓRIOS
ls
-- COMANDO COM PARAMETRO Á LISTA DIRETÓRIO OCULTOS
ls -a

-- COMANDO PARA CRIAR UMA PASTA
mkdir nome_pasta

--COMANDO PARA CRIAR ARQUIVOS E ALTERAR REGISTROS DE DATA E HORA
touch exemplo.txt
touch nome_pasta/exemplo.txt




--COMANDO PARA ENVIAR ALTERAÇÕES PARA REPOSITÓRIO ONLINE GITHUB
git push -u origin master

-- COMANDO PARA ENVIAR ARQUIVOS LOCAIS PARA O GITHUB ONLINE
git init -- Iniciando
git status -- Verificando arquivos
git add . -- Adicionando arquivos a serem enviados
git status -- Verificando
git commit -m "Enviando"
git remote origin https://github.com/EwertonMaik/csharp.git --Caminho para onde será enviado arquivos ou modificações
git push  -u origin master -- Arquivos Enviados


--COMANDO PARA EXIBIR O CAMINHO QUE ESTÀ LOCALIZADO
pwd

-- COMANDO VAI DIRETÓRIO C:
CD /C

-- COMANDO PARA VERIFICAR LOGS DOS COMMIT
GIT LOG
git log --oneline (lista logs)


code .

--COMANDO PARA BUSCAR ALTERAÇÕES DO REPOSITÓRIO ONLINE GITHUB E BAIXAR PARA LOCAL
git fetch https://EwertonMaik@github.com/EwertonMaik/AppJava01.git +refs/heads/master:refs/remotes/origin/master
git merge origin/master

*******************************************
OSEMN
OLEMI
Obter, Limpar, Explorar, Modelar e Interpretar
data scraping
https://www.kaggle.com/
https://medium.com/@wanderson.coord/kibana-incr%C3%ADvel-ferramenta-para-voc%C3%AA-analisar-suas-aplica%C3%A7%C3%B5es-bancos-e-servidores-6824d825b3da
https://www.elastic.co/pt/kibana
https://marketplace.hitachivantara.com/pentaho/

-- ###################################################

git config --global user.name "Seu nome"
git config --global user.email "Seu email de cadastro do Github"
git config --list

-- gerando chave ssh para o github
ssh-keygen -t rsa -b 4096 -C "ewertonmsa@hotmail.com"

-- Passo a passo: Salvar primeira versão de um projeto no Github
git init
git add .
git status 
git commit -m "Mensagem explicativa"
git branch -M main
git remote add origin git@github:seuusuario/seurepositorio.git
git push -u origin main

-- Salvando uma nova versão
git status
git add.
git commit -m "Mensagem explicativa"
git push

-- clonar e modificar um projeto de um repositório remoto que você tem permissão para alterar
git clone git@github.com:seuusuario/seurepositorio.git
git add .
git commit -m "Mensagem explicativa"
git push
git log


code . -- Opção para abrir o Visual Studio Code de dentro do diretório do GitBash

-- verificando o histórico de versões
git log
git log --oneline -- listagem resumida


-- git status, git add e stage
modified untracked deleted / staged / commited

git reset -- tira tudo da area de stage adicionado pelo git add .

git add sobre.html -- adicionando na área de stage apenas um arquivo
git commit -m "Adicionado arquivo sobre"
git status

-- Verificar diferenças entre arquivos
git diff vendas.html

git checkout (código)
git checkout main

git checkout HEAD~1

-- importante antes de fazer o checkout para voltar para HEAD, certifique-se de que
não haja mudanças nos arquivos. Se você acidentalmente mudou alguma coisa, desfaça
as modificações usando:
git reset
git cleann -df
git checkout -- .

-- remover arquivos da área de stage
git status
git reset


-- desfazer modificações não salvas
git status
git reset
git clean -df
git checkout -- .

-- O que fazer quando abre o editor VIM
Habilitar o modo de edição:
i
Sair do VIM, salvando as alterações:
<ESC>
:wq
<ENTER>
Sair do VIM, descartando as alterações:
<ESC>
:q!
<ENTER>

-- Desfazer o último commit
git status
git reset --soft HEAD~1

-- Deletar commits e também modificações nos arquivos
Voltar o projeto ao estado de um dado commit
deletar commits e alterações posteriores a esse commit
git status
git reset -hard <código do commit>

-- Voltar o projeto ao estado do penultimo commit
git status
git reset --hard HEAD~1

-- Traz o projeto de volta ao estado como esta publicado no GitHub
git status
git pull origin main
git pull <nome do remote> <nome do branch>


-- Como resolver push rejeitado
Não é permitido enviar um push se seu repositório local está atrasado em relação ao histórico remoto.
git push

-- Resolvendo Conflito
Mesclando o histórico de dois commits que mexeram no mesmo
arquivo

git pull <nome do remote> <nome do branch>

-- como que sobrescreve um histórico no Github
git push -f <nome do remote> <nome do branch>

-- Apontar o projeto para outro repositório remoto
git remote set-url origin git@github.com:seuusuario/seurepositorio.git

conferir
git remote -v
git push -u origin main
